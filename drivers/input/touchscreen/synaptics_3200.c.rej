--- drivers/input/touchscreen/synaptics_3200.c
+++ drivers/input/touchscreen/synaptics_3200.c
@@ -44,7 +44,6 @@
 	uint16_t addr;
 	struct i2c_client *client;
 	struct input_dev *input_dev;
-	struct input_dev *sr_input_dev;
 	struct workqueue_struct *syn_wq;
 	struct function_t *address_table;
 	int use_irq;
@@ -1309,75 +1359,31 @@
 
 #endif
 
-enum SR_REG_STATE{
-	ALLOCATE_DEV_FAIL = -2,
-	REGISTER_DEV_FAIL,
-	SUCCESS,
-};
-
-static int register_sr_touch_device(void)
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+static ssize_t synaptics_sweep2wake_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
 {
-	struct synaptics_ts_data *ts = gl_ts;
+	size_t count = 0;
 
-	ts->sr_input_dev = input_allocate_device();
-
-	if (ts->sr_input_dev == NULL) {
-		printk(KERN_ERR "[TP][TOUCH_ERR]%s: Failed to allocate SR input device\n", __func__);
-		return ALLOCATE_DEV_FAIL;
-	}
-	ts->sr_input_dev->name = "sr_touchscreen";
-	set_bit(EV_SYN, ts->sr_input_dev->evbit);
-	set_bit(EV_ABS, ts->sr_input_dev->evbit);
-	set_bit(EV_KEY, ts->sr_input_dev->evbit);
-
-	set_bit(KEY_BACK, ts->sr_input_dev->keybit);
-	set_bit(KEY_HOME, ts->sr_input_dev->keybit);
-	set_bit(KEY_MENU, ts->sr_input_dev->keybit);
-	set_bit(KEY_SEARCH, ts->sr_input_dev->keybit);
-	set_bit(BTN_TOUCH, ts->sr_input_dev->keybit);
-	set_bit(KEY_APP_SWITCH, ts->sr_input_dev->keybit);
-	set_bit(INPUT_PROP_DIRECT, ts->sr_input_dev->propbit);
-	ts->sr_input_dev->mtsize = ts->finger_support;
-	input_set_abs_params(ts->sr_input_dev, ABS_MT_TRACKING_ID,
-		0, ts->finger_support - 1, 0, 0);
-	printk(KERN_INFO "[TP][SR]input_set_abs_params: mix_x %d, max_x %d,"
-		" min_y %d, max_y %d\n", ts->layout[0],
-		 ts->layout[1], ts->layout[2], ts->layout[3]);
-
-	input_set_abs_params(ts->sr_input_dev, ABS_MT_POSITION_X,
-		ts->layout[0], ts->layout[1], 0, 0);
-	input_set_abs_params(ts->sr_input_dev, ABS_MT_POSITION_Y,
-		ts->layout[2], ts->layout[3], 0, 0);
-	input_set_abs_params(ts->sr_input_dev, ABS_MT_TOUCH_MAJOR,
-		0, 255, 0, 0);
-	input_set_abs_params(ts->sr_input_dev, ABS_MT_PRESSURE,
-		0, 30, 0, 0);
-	input_set_abs_params(ts->sr_input_dev, ABS_MT_WIDTH_MAJOR,
-		0, 30, 0, 0);
+	count += sprintf(buf, "%d\n", s2w_switch);
 
-	if (input_register_device(ts->sr_input_dev)) {
-                input_free_device(ts->sr_input_dev);
-		printk(KERN_ERR "[TP][SR][TOUCH_ERR]%s: Unable to register %s input device\n",
-			__func__, ts->sr_input_dev->name);
-		return REGISTER_DEV_FAIL;
-	}
-	return SUCCESS;
+	return count;
 }
 
-static ssize_t set_en_sr(struct device *dev, struct device_attribute *attr,
-						const char *buf, size_t count)
+static ssize_t synaptics_sweep2wake_dump(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
 {
-	struct synaptics_ts_data *ts = gl_ts;
-	if (buf[0]) {
-		if (ts->sr_input_dev)
-			printk(KERN_INFO "[TP]%s: SR device already exist!\n", __func__);
-		else
-			printk(KERN_INFO "[TP]%s: SR touch device enable result:%X\n", __func__, register_sr_touch_device());
-	}
+	if (buf[0] >= '0' && buf[0] <= '2' && buf[1] == '\n')
+                if (s2w_switch != buf[0] - '0')
+		        s2w_switch = buf[0] - '0';
+
 	return count;
 }
 
-static DEVICE_ATTR(sr_en, S_IWUSR, 0, set_en_sr);
+static DEVICE_ATTR(sweep2wake, (S_IWUSR|S_IRUGO),
+	synaptics_sweep2wake_show, synaptics_sweep2wake_dump);
+#endif
+
 
 static struct kobject *android_touch_kobj;
 
@@ -1404,8 +1410,7 @@
 		sysfs_create_file(android_touch_kobj, &dev_attr_layout.attr) ||
 		sysfs_create_file(android_touch_kobj, &dev_attr_pdt.attr) ||
 		sysfs_create_file(android_touch_kobj, &dev_attr_htc_event.attr) ||
-		sysfs_create_file(android_touch_kobj, &dev_attr_reset.attr) ||
-		sysfs_create_file(android_touch_kobj, &dev_attr_sr_en.attr)
+		sysfs_create_file(android_touch_kobj, &dev_attr_reset.attr)
 #ifdef SYN_WIRELESS_DEBUG
 		|| sysfs_create_file(android_touch_kobj, &dev_attr_enabled.attr)
 #endif
@@ -1468,7 +1481,9 @@
 	sysfs_remove_file(android_touch_kobj, &dev_attr_pdt.attr);
 	sysfs_remove_file(android_touch_kobj, &dev_attr_htc_event.attr);
 	sysfs_remove_file(android_touch_kobj, &dev_attr_reset.attr);
-	sysfs_remove_file(android_touch_kobj, &dev_attr_sr_en.attr);
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	sysfs_remove_file(android_touch_kobj, &dev_attr_sweep2wake.attr);
+#endif
 #ifdef SYN_WIRELESS_DEBUG
 	sysfs_remove_file(android_touch_kobj, &dev_attr_enabled.attr);
 #endif
@@ -2662,8 +2758,6 @@
 		if (ts->syn_wq)
 			destroy_workqueue(ts->syn_wq);
 	}
-	if(ts->sr_input_dev != NULL)
-		input_unregister_device(ts->sr_input_dev);
 	input_unregister_device(ts->input_dev);
 
 	synaptics_touch_sysfs_remove();
