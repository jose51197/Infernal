--- block/elevator.c
+++ block/elevator.c
@@ -510,41 +510,6 @@
 	__elv_add_request(q, rq, ELEVATOR_INSERT_REQUEUE);
 }
 
-/**
- * elv_reinsert_request() - Insert a request back to the scheduler
- * @q:    request queue where request should be inserted
- * @rq:    request to be inserted
- *
- * This function returns the request back to the scheduler to be
- * inserted as if it was never dispatched
- *
- * Return: 0 on success, error code on failure
- */
-int elv_reinsert_request(struct request_queue *q, struct request *rq)
-{
-  int res;
-
-  if (!q->elevator->type->ops.elevator_reinsert_req_fn)
-    return -EPERM;
-
-  res = q->elevator->type->ops.elevator_reinsert_req_fn(q, rq);
-  if (!res) {
-    /*
-     * it already went through dequeue, we need to decrement the
-     * in_flight count again
-     */
-    if (blk_account_rq(rq)) {
-      q->in_flight[rq_is_sync(rq)]--;
-      if (rq->cmd_flags & REQ_SORTED)
-        elv_deactivate_rq(q, rq);
-    }
-    rq->cmd_flags &= ~REQ_STARTED;
-    q->nr_sorted++;
-  }
-
-  return res;
-}
-
 void elv_drain_elevator(struct request_queue *q)
 {
 	static int printed;
@@ -715,12 +680,6 @@
 {
 	struct elevator_queue *e = q->elevator;
 
-  if (rq->cmd_flags & REQ_URGENT) {
-    q->notified_urgent = false;
-    WARN_ON(!q->dispatched_urgent);
-    q->dispatched_urgent = false;
-  }
-
 	if (blk_account_rq(rq)) {
 		q->in_flight[rq_is_sync(rq)]--;
 		if ((rq->cmd_flags & REQ_SORTED) &&
