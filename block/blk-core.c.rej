--- block/blk-core.c
+++ block/blk-core.c
@@ -222,14 +222,7 @@
 	if (unlikely(blk_queue_stopped(q)))
 		return;
 
-  if (!q->notified_urgent &&
-    q->elevator->type->ops.elevator_is_urgent_fn &&
-    q->urgent_request_fn &&
-    q->elevator->type->ops.elevator_is_urgent_fn(q)) {
-    q->notified_urgent = true;
-    q->urgent_request_fn(q);
-  } else
-    q->request_fn(q);
+	q->request_fn(q);
 }
 EXPORT_SYMBOL(__blk_run_queue);
 
@@ -749,74 +742,10 @@
 
 	BUG_ON(blk_queued_rq(rq));
 
-  if (rq->cmd_flags & REQ_URGENT) {
-    /*
-     * It's not compliant with the design to re-insert
-     * urgent requests. We want to be able to track this
-     * down.
-     */
-    pr_err("%s(): requeueing an URGENT request", __func__);
-    WARN_ON(!q->dispatched_urgent);
-    q->dispatched_urgent = false;
-  }
 	elv_requeue_request(q, rq);
 }
 EXPORT_SYMBOL(blk_requeue_request);
 
-/**
- * blk_reinsert_request() - Insert a request back to the scheduler
- * @q:    request queue
- * @rq:    request to be inserted
- *
- * This function inserts the request back to the scheduler as if
- * it was never dispatched.
- *
- * Return: 0 on success, error code on fail
- */
-int blk_reinsert_request(struct request_queue *q, struct request *rq)
-{
-  if (unlikely(!rq) || unlikely(!q))
-    return -EIO;
-
-  blk_delete_timer(rq);
-  blk_clear_rq_complete(rq);
-  trace_block_rq_requeue(q, rq);
-
-  if (blk_rq_tagged(rq))
-    blk_queue_end_tag(q, rq);
-
-  BUG_ON(blk_queued_rq(rq));
-  if (rq->cmd_flags & REQ_URGENT) {
-    /*
-     * It's not compliant with the design to re-insert
-     * urgent requests. We want to be able to track this
-     * down.
-     */
-    pr_err("%s(): requeueing an URGENT request", __func__);
-    WARN_ON(!q->dispatched_urgent);
-    q->dispatched_urgent = false;
-  }
-
-  return elv_reinsert_request(q, rq);
-}
-EXPORT_SYMBOL(blk_reinsert_request);
-
-/**
- * blk_reinsert_req_sup() - check whether the scheduler supports
- *          reinsertion of requests
- * @q:    request queue
- *
- * Returns true if the current scheduler supports reinserting
- * request. False otherwise
- */
-bool blk_reinsert_req_sup(struct request_queue *q)
-{
-  if (unlikely(!q))
-    return false;
-  return q->elevator->type->ops.elevator_reinsert_req_fn ? true : false;
-}
-EXPORT_SYMBOL(blk_reinsert_req_sup);
-
 static void add_acct_request(struct request_queue *q, struct request *rq,
 			     int where)
 {
@@ -1530,13 +1459,8 @@
 	struct request *rq;
 
 	rq = blk_peek_request(q);
-  if (rq) {
-    if (rq->cmd_flags & REQ_URGENT) {
-      WARN_ON(q->dispatched_urgent);
-      q->dispatched_urgent = true;
-    }
+	if (rq)
 		blk_start_request(rq);
-  }
 	return rq;
 }
 EXPORT_SYMBOL(blk_fetch_request);
