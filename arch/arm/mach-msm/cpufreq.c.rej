--- arch/arm/mach-msm/cpufreq.c
+++ arch/arm/mach-msm/cpufreq.c
@@ -58,28 +58,11 @@
 static int set_cpu_freq(struct cpufreq_policy *policy, unsigned int new_freq)
 {
 	int ret = 0;
-#ifdef CONFIG_PERFLOCK
-	int perf_freq = 0;
-#endif
+
 	struct cpufreq_freqs freqs;
 
 	freqs.old = policy->cur;
-#ifdef CONFIG_PERFLOCK
-	if (override_cpu) {
-		/* mfreq enabled */
-		if (policy->cur == policy->max)
-			return 0;
-		else
-			freqs.new = policy->max;
-	} else if ((perf_freq = perflock_override(policy, new_freq))) {
-		/* perflock & cpufreq_ceiling enabled */
-		if (policy->cur == perf_freq)
-			return 0;
-		else
-			freqs.new = perf_freq;
-	} else
-		freqs.new = new_freq;
-#else
+
 	if (override_cpu) {
 		if (policy->cur == policy->max)
 			return 0;
@@ -87,7 +70,6 @@
 			freqs.new = policy->max;
 	} else
 		freqs.new = new_freq;
-#endif
 	freqs.cpu = policy->cpu;
 	cpufreq_notify_transition(&freqs, CPUFREQ_PRECHANGE);
 	ret = acpuclk_set_rate(policy->cpu, freqs.new, SETRATE_CPUFREQ);
@@ -234,14 +216,16 @@
 
 	policy->cur = cur_freq;
 
-	policy->cpuinfo.transition_latency =
-		acpuclk_get_switch_time() * NSEC_PER_USEC;
+	policy->cpuinfo.transition_latency = 10 * 1000;
 #ifdef CONFIG_SMP
 	cpu_work = &per_cpu(cpufreq_work, policy->cpu);
 	INIT_WORK(&cpu_work->work, set_cpu_work);
 	init_completion(&cpu_work->complete);
 #endif
 
+		policy->min = 192000;
+		policy->max = 2106000;
+
 	return 0;
 }
 
